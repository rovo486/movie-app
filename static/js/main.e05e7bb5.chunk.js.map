{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","poster","alt","src","title","className","MovieGenre","genre","Movie","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","response","json","data","catch","err","console","log","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oVA8BA,SAASA,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC1B,OACI,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKG,UAAU,kBAI1D,SAASC,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACjB,OACI,0BAAMF,UAAU,gBAAgBE,GAoBzBC,MArDf,YAAkD,IAAlCJ,EAAiC,EAAjCA,MAAOH,EAA0B,EAA1BA,OAAQQ,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACnC,OACI,yBAAKL,UAAU,SACX,yBAAKA,UAAU,iBACX,kBAACL,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAEtC,yBAAKC,UAAU,iBACX,4BAAKD,GACL,yBAAKC,UAAU,iBACVI,EAAOE,KAAI,SAACJ,EAAOK,GAAR,OAAkB,kBAACN,EAAD,CAAYC,MAAOA,EAAOM,IAAKD,QAEjE,yBAAKP,UAAU,mBACf,kBAAC,IAAD,CACIS,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBC0DbC,E,4MAzEfC,MAAQ,G,EAoCRC,cAAgB,WAUd,OATgB,EAAKD,MAAME,OAAOX,KAAI,SAACY,GACrC,OAAO,kBAAC,EAAD,CACLnB,MAAOmB,EAAMnB,MACbH,OAAQsB,EAAMC,mBACdX,IAAKU,EAAME,GACXhB,OAAQc,EAAMd,OACdC,SAAUa,EAAMb,e,EAMtBgB,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLN,EADK,OAEX,EAAKO,SAAS,CACZP,WAHS,2C,EAObM,SAAW,WAET,OAAOE,MAAM,kDACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKZ,UACvBa,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,kEA5B1BG,KAAKb,e,+BAgCL,OACI,yBAAKrB,UAAU,OACZkC,KAAKnB,MAAME,OAASiB,KAAKlB,gBAAkB,e,GArElCmB,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAqB,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.e05e7bb5.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Movie.css';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\nfunction Movie({title, poster, genres, synopsis}){\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster} alt={title} />\r\n            </div>   \r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                <LinesEllipsis\r\n                    text={synopsis}\r\n                    maxLine='3'\r\n                    ellipsis='...'\r\n                    trimRight\r\n                    basedOn='letters'\r\n                    />   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n    return (\r\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    synopsis: PropTypes.string.isRequired\r\n}\r\n\r\nMoviePoster.propTypes = {\r\n    poster: PropTypes.string.isRequired,\r\n    alt: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes ={\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Movie from './Movie';\n \nclass App extends Component {\n  \nstate = {}\n\n// componentDidMount(){\n//   setTimeout(() => {\n//     this.setState({\n//       movies: [  \n//         { \n//           title:\"Matrix1\",\n//           poster:\"https://lh3.googleusercontent.com/proxy/PcsV8Ovtp8p0se3xLZIIoandIZNRYO5aBl6S2seA9y7AcY062XZr7vs6zGUndOkdO0CB23TVgNDTyV0yYHF4JcG1KZBdf2juMY-fMYdjdyM\"\n//         }, \n//         { \n//           title:\"Matrix2\",\n//           poster:\"https://debatingday.com/wp/wp-content/uploads/2019/10/20191008_071822.jpg\"\n//         },  \n//         { \n//           title:\"Matrix3\",\n//           poster:\"https://lh3.googleusercontent.com/proxy/PcsV8Ovtp8p0se3xLZIIoandIZNRYO5aBl6S2seA9y7AcY062XZr7vs6zGUndOkdO0CB23TVgNDTyV0yYHF4JcG1KZBdf2juMY-fMYdjdyM\"\n//         }, \n//         { \n//           title:\"Matrix4\",\n//           poster:\"https://debatingday.com/wp/wp-content/uploads/2019/10/20191008_071822.jpg\"\n//         },\n//         {\n//           title: \"Transpoting\",\n//           poster: \"https://lh3.googleusercontent.com/proxy/3-RU5G1mc_AYtMGH7n643PTr55Jv5b-ndB38Hucw0Gfn6ZhyJbAKFGLQSP466t7pCS8JElj5a2kaVEKh6xUA9HvrC1RKuVkqlDmiONxBeKOPCHGEYHiz\"\n//         },\n//         // ...this.state.movies,\n//       ]\n//     })\n//   }, 2000)\n// }\n\ncomponentDidMount(){ \n  this._getMovies();\n}\n\n_renderMovies = () => {\n  const movies =  this.state.movies.map((movie) => {\n    return <Movie \n      title={movie.title} \n      poster={movie.medium_cover_image} \n      key={movie.id}\n      genres={movie.genres}\n      synopsis={movie.synopsis}\n    />\n  })\n  return movies\n}\n\n_getMovies = async () => {\n  const movies = await this._callApi()\n  this.setState({\n    movies\n  })\n}\n\n_callApi = () => {\n  // fetch('https://yts.ag/api/v2/list_movies.json')\n  return fetch('api/v2/list_movies.json?sort_by=download_count')\n  .then(response => response.json())\n  .then(json => json.data.movies)\n  .catch(err => console.log(err))\n}\n\nrender() {  \n  return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : 'Loading'} \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}